# See: http://wiki.flightgear.org/MapStructure
# Class things:
var name = 'ALT-profile';
var parents = [canvas.SymbolLayer.Controller];
var __self__ = caller(0)[0];
var _options = { # default configuration options
    active_node: "/autopilot/route-manager/active",
    vnav_node: "/autopilot/route-manager/vnav/",
    types: ["tc", "td", "sc", "ed"],
};
canvas.SymbolLayer.Controller.add(name, __self__);
canvas.SymbolLayer.add(name, {
    parents: [canvas.SymbolLayer],
    type: name, # Symbol type
    df_controller: __self__, # controller to use by default -- this one
});
var new = func(layer) {
    var m = {
        parents: [__self__],
        layer: layer,
        #map: layer.map,
        listeners: [],
    };
    print('LAYER: --->');
    print(typeof(layer));
    debug.dump(keys(layer));
    #debug.dump(layer.parents);
    layer.searcher._equals = func(a,b) a.getName() == b.getName();
    #append(m.listeners, setlistener(layer.options.active_node, func m.layer.update() ));
    #m.addVisibilityListener();
 
    return m;
};
var del = func() {
    foreach (var l; me.listeners)
        removelistener(l);
};
 
var searchCmd = func {
    var results = [];
    var symNode = props.globals.getNode(me._options.vnav_node);
    if (symNode != nil)
        foreach (var t; me._options.types) {
            var n = symNode.getNode(t);
            if (n != nil and n.getValue('longitude-deg') != nil){
                #n.__layer = me.layer;
                #n.del = func{
                #    if(me.__layer != nil){
                #        var sym = me.__layer.findsym(me);
                #        if(sym != nil)
                #            sym.del();
                #    }
                #};
                #n.vnav_armed = getprop('instrumentation/efis/nd/vnav');
                append(results, n);
            }
        }
    return results;
}
