# See: http://wiki.flightgear.org/MapStructure
# Class things:
var name = 'WPT-airbus';
var parents = [canvas.SymbolLayer.Controller];
var __self__ = caller(0)[0];

canvas.SymbolLayer.Controller.add(name, __self__);
canvas.SymbolLayer.add(name, {
    parents: [canvas.MultiSymbolLayer],
    type: name, # Symbol type
    df_controller: __self__, # controller to use by default -- this one
    df_options: { # default configuration options
        fix_symbol: func(group){
            group.createChild('path')
            .moveTo(-10,0)
            .lineTo(0,-17)
            .lineTo(10,0)
            .lineTo(0,17)
            .close()
            .setStrokeLineWidth(3)
            .setColor(1,1,1)
            .setScale(1);
        },
        vor_symbol: 'Nasal/canvas/map/Airbus/Images/airbus_vor.svg',
        airport_symbol: 'Nasal/canvas/map/Airbus/Images/airbus_airport.svg',
        ndb_symbol: func(group){
            group.createChild('path')
            .moveTo(-15,15)
            .lineTo(0,-15)
            .lineTo(15,15)
            .close()
            .setStrokeLineWidth(3)
            #.setColor(0.69,0,0.39)
            .setScale(1,1);
        }
    },
    df_style: {
        active_wp_color: [0.4,0.7,0.4],
        current_wp_color: [1,1,1]
    },
    toggle_cstr: 0
});

var new = func(layer) {
    var m = {
        parents: [__self__],
        layer: layer,
        map: layer.map,
        listeners: [],
    };
    layer.searcher._equals = func(a,b) a.equals(b);
    return m;
};

var del = func() {
    foreach (var l; me.listeners)
        removelistener(l);
};

var WPTModel = {
    new: func(fp, idx) {
        var m = { parents:[WPTModel] };
        var wp = fp.getWP(idx);

        m.id = wp.id;
        m.name = wp.wp_name;
        m.alt = wp.alt_cstr;
        m.wp_id = wp.id;
        m.type = wp.wp_type;

        (m.lat,m.lon) = (wp.wp_lat,wp.wp_lon);
        m.wp = wp;
        idx = wp.index;
        m.idx = idx;
        m.is_departure = (idx == 0 and m.type == 'runway');
        m.is_destination = (idx > 0 and m.type == 'runway');
        return m;
    },
    equals: func(other) {
        # this is set on symbol init, so use this for equality...
        me.name == other.name and me.alt == other.alt and
        me.type == other.type
    },
};

var searchCmd = func {
    var fp = flightplan();
    var fpSize = fp.getPlanSize();
    var result = [];
    for (var i = 0; i < fpSize; i+=1)
        append(result, WPTModel.new(fp, i));
    return result;
}
