# See: http://wiki.flightgear.org/MapStructure
# Class things:
var name = 'HOLD';
var parents = [canvas.DotSym];
var __self__ = caller(0)[0];
canvas.DotSym.makeinstance( name, __self__ );
 
#canvas.SymbolLayer.get(name).df_style = {
#    radius: 13,
#};
 
var element_type = "group";

var init = func {
    var type = me.model.type;
    var dist = me.model.dist;
    var turn = me.model.turn;
    if(type == 'pattern'){
        var pattern = me.element.createChild("path", 'hold-pattern');
        pattern.set("z-index",4);
        var w = (dist * 2) / math.pi;
        var h = dist * 70;
        var r = w / 2;
        pattern.arcSmallCW(r,r,0,70 * w,0).
        line(0,h).
        arcSmallCW(r,r,0,-70 * w,0).
        line(0,-h).
        setStrokeLineWidth(5).
        setColor(0.4,0.7,0.4);
        me.hold_pattern = pattern;
        me.hold_symbol = nil;
    } else {
        print('CREATING HOLD SYM');
        me.hold_pattern = nil;
        me.hold_symbol = me.element.createChild("group", 'hold-symbol');
        var aircraft_dir = split('/', getprop("/sim/aircraft-dir"))[-1];
        canvas.parsesvg(me.hold_symbol, "Aircraft/" ~ aircraft_dir ~ "/Models/Instruments/ND/res/airbus_hold"~turn~".svg");
        me.hold_symbol.setTranslation(-32,-64).set('z-index', 4);
    }
}

var draw = func{
    var type = me.model.type;
    if(type == 'pattern'){
        if(me.hold_symbol != nil){
            me.hold_symbol.hide();
        }
        if(me.hold_pattern == nil)
            me.hold_pattern = me.element.getElementById('hold-pattern');
        if(me.hold_pattern == nil) return;
        var radial = me.model.radial;
        if(radial != nil){

            var hdg = canvas_nd.nd_display.main._node.getNode('group/map').getValue('hdg');
            if(hdg == nil) hdg = 0;
            radial -= hdg;
            if(radial < 0) radial = 360 + radial; 
            me.element.setRotation(radial*D2R);
        }
        var rng = canvas_nd.nd_display.main._node.getNode('group/map').getValue('range');
        if(rng == nil) rng = 10;
        rng =  10 / rng;
        #print("CANVAS: Hold RNG: " ~ rng);
        me.element.setScale(rng,rng);
        var lnav = (getprop('flight-management/control/lat-ctrl') == 'fmgc');
        var actv = getprop('autopilot/route-manager/active');
        #print('HOLD ' ~ lnav ~ ',' ~ actv);
        if(!lnav or !actv)
            me.hold_pattern.setStrokeDashArray([32, 16]);
        else
            me.hold_pattern.setStrokeDashArray([]);
        if(!actv)
            me.hold_pattern.setColor(0.95,0.95,0.21);
        else 
            me.hold_pattern.setColor(0.4,0.7,0.4);
    } else {
        if(me.hold_pattern != nil){
            me.hold_pattern.hide();
        }
        if(me.hold_symbol == nil)
            me.hold_symbol = me.element.getElementById('hold-symbol');

        me.hold_symbol.show();
        me.element.setScale(1,1);
        me.element.setRotation(0);
    }
}
