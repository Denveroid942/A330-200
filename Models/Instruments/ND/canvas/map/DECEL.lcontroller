# See: http://wiki.flightgear.org/MapStructure
# Class things:
var name = 'DECEL';
var parents = [canvas.SymbolLayer.Controller];
var __self__ = caller(0)[0];

var nd_props = canvas.NDConfig.properties;
var _options = { # default configuration options
    active_node: nd_props.fplan_active,
    decel_node: "/instrumentation/nd/symbols/decel/"
};
canvas.SymbolLayer.Controller.add(name, __self__);
canvas.SymbolLayer.add(name, {
    parents: [canvas.SymbolLayer],
    type: name, # Symbol type
    df_controller: __self__, # controller to use by default -- this one
});
var new = func(layer) {
    var m = {
        parents: [__self__],
        layer: layer,
        #map: layer.map,
        listeners: [],
    };
    layer.searcher._equals = func(a,b) a.getName() == b.getName();
    #append(m.listeners, setlistener(layer.options.active_node, func m.layer.update() ));
    #m.addVisibilityListener();
 
    return m;
};
var del = func() {
    foreach (var l; me.listeners)
        removelistener(l);
};
 
var searchCmd = func {
    var results = [];
    var symNode = props.globals.getNode(me._options.decel_node);
    if (symNode != nil and symNode.getValue('longitude-deg') != nil)
        append(results, symNode);
    return results;
}
