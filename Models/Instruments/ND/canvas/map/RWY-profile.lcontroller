# See: http://wiki.flightgear.org/MapStructure

var name = 'RWY-profile';
var parents = [SymbolLayer.Controller];
var __self__ = caller(0)[0];
SymbolLayer.Controller.add(name, __self__);
SymbolLayer.add(name, {
    parents: [MultiSymbolLayer],
    type: name, # Symbol type
    df_controller: __self__, # controller to use by default -- this one
    #df_options: { # default configuration options
    #    active_node: "/autopilot/route-manager/active",
    #    current_wp_node: "/autopilot/route-manager/current-wp",
    #}
});

var new = func(layer) {
    var m = {
        parents: [__self__],
        layer: layer,
        map: layer.map,
        listeners: [],
    };
    layer.searcher._equals = func(l,r) {l.equals(r)}; # TODO: create model objects instead?
    #append(m.listeners, setlistener(layer.options.active_node, func m.layer.update() ));
    #m.addVisibilityListener();

    return m;
};

var del = func() {
    foreach (var l; me.listeners)
    removelistener(l);
};

var FPRunwayModel = {
    new: func(apt, rwy){
        var m = {
            parents: [FPRunwayModel],
            id: rwy.id,
            lat: rwy.lat,
            lon: rwy.lon,
            length: rwy.length,
            width: rwy.width,
            heading: rwy.heading,
            airport_id: apt.id
        };
        return m;
    },
    latlon: func(){ 
        return [
            me.lat,
            me.lon
        ];
    },
    equals: func(o){me.id == o.id and me.airport_id == o.airport_id}
};

var searchCmd = func {
    var nd_props = canvas.NDConfig.properties;
    var desApt = airportinfo(getprop(nd_props.des_apt));
    var depApt = airportinfo(getprop(nd_props.dep_apt));
    if(desApt == nil and depApt == nil)
        return [];
    var res = [];
    var desRwy = nil;
    var depRwy = nil;
    
    if(depApt != nil){
        depRwy = depApt.runway(getprop(nd_props.dep_rwy));
        if(depRwy != nil){
            var model = FPRunwayModel.new(depApt, depRwy);
            append(res, model);
        }
    }
    if(desApt != nil){
        desRwy = desApt.runway(getprop(nd_props.des_rwy));
        if(desRwy != nil){
            var model = FPRunwayModel.new(desApt, desRwy);
            append(res, model);
        }
    }
    return res;
};
