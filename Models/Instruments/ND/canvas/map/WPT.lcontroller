# See: http://wiki.flightgear.org/MapStructure
# Class things:
var name = 'WPT';
var parents = [canvas.SymbolLayer.Controller];
var __self__ = caller(0)[0];

var nd_props = canvas.NDConfig.properties;
var _options = { # default configuration options
    active_node: nd_props.fplan_active,
    #vnav_node: "/autopilot/route-manager/vnav/"
};
canvas.SymbolLayer.Controller.add(name, __self__);
canvas.SymbolLayer.add(name, {
    parents: [canvas.SymbolLayer],
    type: name, # Symbol type
    df_controller: __self__, # controller to use by default -- this one
});
var new = func(layer) {
    var m = {
        parents: [__self__],
        layer: layer,
        #map: layer.map,
        listeners: [],
    };
    #debug.dump(layer.parents);
    layer.searcher._equals = func(a,b) a.equals(b);
    #append(m.listeners, setlistener(layer.options.active_node, func m.layer.update() ));
    #m.addVisibilityListener();
 
    return m;
};
var del = func() {
    foreach (var l; me.listeners)
        removelistener(l);
};
 
var WPTModel = {
    new: func(fp, idx, offset=0) {
        var m = { parents:[WPTModel], idx:(idx+offset) };
        var wp = fp.getWP(idx);

        m.name = wp.wp_name;
        m.alt = wp.alt_cstr;
        m.wp_id = wp.id;
        m.type = wp.wp_type;

        if (idx) var n = wp.path()[-1];
        else var n = fp.getWP(1).path()[0];
        (m.lat,m.lon) = (n.lat,n.lon);
        m.wp = wp;
        m.is_departure = (idx == 0);
        m.is_destination = (idx == (fp.getPlanSize() - 1));
        return m;
    },
    equals: func(other) {
        # this is set on symbol init, so use this for equality...
        me.name == other.name and me.alt == other.alt and 
        me.type == other.type
    },
};

var searchCmd = func {
    #printlog(_MP_dbg_lvl, "Running query: "~name);

    #if (!getprop(_options.active_node)) return [];

    var fp = flightplan();
    var fpSize = fp.getPlanSize();
    var result = [];
    for (var i = 0; i < fpSize; i+=1)
        append(result, WPTModel.new(fp, i));
    return result;
}
